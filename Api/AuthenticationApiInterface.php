<?php
/**
 * AuthenticationApiInterface
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Catroweb API
 *
 * API for the Catrobat Share Platform
 *
 * The version of the OpenAPI document: v1.1.1
 * Contact: webmaster@catrobat.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Api;

use Symfony\Component\HttpFoundation\File\UploadedFile;
use OpenAPI\Server\Model\JWTResponse;
use OpenAPI\Server\Model\LoginRequest;
use OpenAPI\Server\Model\OAuthLoginRequest;
use OpenAPI\Server\Model\RefreshRequest;
use OpenAPI\Server\Model\UpgradeTokenRequest;

/**
 * AuthenticationApiInterface Interface Doc Comment
 *
 * @category Interface
 * @package  OpenAPI\Server\Api
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */
interface AuthenticationApiInterface
{

    /**
     * Sets authentication method PandaAuth
     *
     * @param string $value Value of the PandaAuth authentication method.
     *
     * @return void
     */
    public function setPandaAuth($value);

    /**
     * Operation authenticationDelete
     *
     * Expires refresh token
     *
     * @param  \string $x_refresh  Refresh Token (required)
     * @param  \array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return void
     */
    public function authenticationDelete(string $x_refresh, &$responseCode, array &$responseHeaders): void;


    /**
     * Operation authenticationGet
     *
     * Check token
     *
     * @param  \array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return void
     */
    public function authenticationGet(&$responseCode, array &$responseHeaders): void;


    /**
     * Operation authenticationOauthPost
     *
     * OAuth Login
     *
     * @param  \OpenAPI\Server\Model\OAuthLoginRequest $o_auth_login_request   (required)
     * @param  \array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return \OpenAPI\Server\Model\JWTResponse
     */
    public function authenticationOauthPost(OAuthLoginRequest $o_auth_login_request, &$responseCode, array &$responseHeaders): array|\OpenAPI\Server\Model\JWTResponse;


    /**
     * Operation authenticationPost
     *
     * Login
     *
     * @param  \OpenAPI\Server\Model\LoginRequest $login_request   (required)
     * @param  \array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return \OpenAPI\Server\Model\JWTResponse
     */
    public function authenticationPost(LoginRequest $login_request, &$responseCode, array &$responseHeaders): array|\OpenAPI\Server\Model\JWTResponse;


    /**
     * Operation authenticationRefreshPost
     *
     * Refresh token
     *
     * @param  \OpenAPI\Server\Model\RefreshRequest $refresh_request   (required)
     * @param  \array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return \OpenAPI\Server\Model\JWTResponse
     */
    public function authenticationRefreshPost(RefreshRequest $refresh_request, &$responseCode, array &$responseHeaders): array|\OpenAPI\Server\Model\JWTResponse;


    /**
     * Operation authenticationUpgradePost
     *
     * Upgrade a deprecated token to JWT
     *
     * @param  \OpenAPI\Server\Model\UpgradeTokenRequest $upgrade_token_request   (required)
     * @param  \array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return \OpenAPI\Server\Model\JWTResponse
     */
    public function authenticationUpgradePost(UpgradeTokenRequest $upgrade_token_request, &$responseCode, array &$responseHeaders): array|\OpenAPI\Server\Model\JWTResponse;

}
