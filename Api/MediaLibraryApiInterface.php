<?php
/**
 * MediaLibraryApiInterface
 * PHP version 7.1.3
 *
 * @category Class
 * @package  OpenAPI\Server
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Catroweb API
 *
 * API for the Catrobat Share Platform
 *
 * The version of the OpenAPI document: v1.0.40
 * Contact: webmaster@catrobat.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Api;

use Symfony\Component\HttpFoundation\File\UploadedFile;
use OpenAPI\Server\Model\MediaFile;

/**
 * MediaLibraryApiInterface Interface Doc Comment
 *
 * @category Interface
 * @package  OpenAPI\Server\Api
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */
interface MediaLibraryApiInterface
{

    /**
     * Operation mediaFileIdGet
     *
     * Get the information of a specific media file
     *
     * @param  int $id  ID of any given media file (required)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return OpenAPI\Server\Model\MediaFile
     *
     */
    public function mediaFileIdGet(int $id, &$responseCode, array &$responseHeaders);

    /**
     * Operation mediaFilesGet
     *
     * Get *all* content of the media library.
     *
     * @param  int $limit   (optional, default to 20)
     * @param  int $offset   (optional, default to 0)
     * @param  string $flavor   (optional)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return OpenAPI\Server\Model\MediaFile[]
     *
     */
    public function mediaFilesGet(int $limit = 20, int $offset = 0, string $flavor = null, &$responseCode, array &$responseHeaders);

    /**
     * Operation mediaFilesSearchGet
     *
     * Search for mediafiles associated with keywords
     *
     * @param  string $query   (required)
     * @param  string $flavor   (optional)
     * @param  int $limit   (optional, default to 20)
     * @param  int $offset   (optional, default to 0)
     * @param  string $package_name  In which package you want to search (for more fine tuned results) (optional)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return OpenAPI\Server\Model\MediaFile[]
     *
     */
    public function mediaFilesSearchGet(string $query, string $flavor = null, int $limit = 20, int $offset = 0, string $package_name = null, &$responseCode, array &$responseHeaders);

    /**
     * Operation mediaPackagePackageNameGet
     *
     * Get media-library asstes of a named package
     *
     * @param  string $package_name  Name of the package (required)
     * @param  int $limit   (optional, default to 20)
     * @param  int $offset   (optional, default to 0)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return OpenAPI\Server\Model\MediaFile[]
     *
     */
    public function mediaPackagePackageNameGet(string $package_name, int $limit = 20, int $offset = 0, &$responseCode, array &$responseHeaders);
}
