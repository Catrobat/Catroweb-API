<?php
/**
 * UpdateUserErrorResponse
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Catroweb API
 *
 * API for the Catrobat Share Platform
 *
 * The version of the OpenAPI document: v1.1.3
 * Contact: webmaster@catrobat.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the UpdateUserErrorResponse model.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */
class UpdateUserErrorResponse 
{
        /**
     * @var string|null
     * @SerializedName("email")
     * @Assert\Choice({ "Email already in use", "Email invalid" })
     * @Assert\Type("string")
     * @Type("string")
     */
    protected ?string $email;

    /**
     * @var string|null
     * @SerializedName("username")
     * @Assert\Choice({ "Username too short", "Username too long", "Username already in use", "Username must not contain an email address" })
     * @Assert\Type("string")
     * @Type("string")
     */
    protected ?string $username;

    /**
     * @var string|null
     * @SerializedName("password")
     * @Assert\Choice({ "Password too short", "Password too long", "Password contains invalid chars" })
     * @Assert\Type("string")
     * @Type("string")
     */
    protected ?string $password;

    /**
     * @var string|null
     * @SerializedName("currentPassword")
     * @Assert\Choice({ "Current password is missing", "Current password is wrong" })
     * @Assert\Type("string")
     * @Type("string")
     */
    protected ?string $current_password;

    /**
     * @var string|null
     * @SerializedName("picture")
     * @Assert\Choice({ "Profile picture invalid or not supported" })
     * @Assert\Type("string")
     * @Type("string")
     */
    protected ?string $picture;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->email = $data['email'] ?? null;
        $this->username = $data['username'] ?? null;
        $this->password = $data['password'] ?? null;
        $this->current_password = $data['current_password'] ?? null;
        $this->picture = $data['picture'] ?? null;
    }

    /**
     * Gets email.
     *
     * @return string|null
     */
    public function getEmail(): ?string
    {
        return $this->email;
    }

    /**
     * Sets email.
     *
     * @param string|null $email
     *
     * @return $this
     */
    public function setEmail(string $email = null): self
    {
        $this->email = $email;

        return $this;
    }

    /**
     * Gets username.
     *
     * @return string|null
     */
    public function getUsername(): ?string
    {
        return $this->username;
    }

    /**
     * Sets username.
     *
     * @param string|null $username
     *
     * @return $this
     */
    public function setUsername(string $username = null): self
    {
        $this->username = $username;

        return $this;
    }

    /**
     * Gets password.
     *
     * @return string|null
     */
    public function getPassword(): ?string
    {
        return $this->password;
    }

    /**
     * Sets password.
     *
     * @param string|null $password
     *
     * @return $this
     */
    public function setPassword(string $password = null): self
    {
        $this->password = $password;

        return $this;
    }

    /**
     * Gets current_password.
     *
     * @return string|null
     */
    public function getCurrentPassword(): ?string
    {
        return $this->current_password;
    }

    /**
     * Sets current_password.
     *
     * @param string|null $current_password
     *
     * @return $this
     */
    public function setCurrentPassword(string $current_password = null): self
    {
        $this->current_password = $current_password;

        return $this;
    }

    /**
     * Gets picture.
     *
     * @return string|null
     */
    public function getPicture(): ?string
    {
        return $this->picture;
    }

    /**
     * Sets picture.
     *
     * @param string|null $picture
     *
     * @return $this
     */
    public function setPicture(string $picture = null): self
    {
        $this->picture = $picture;

        return $this;
    }
}


