<?php
/**
 * ProjectResponseTest.
 *
 * PHP version 8.1.1
 *
 * @category Class
 *
 * @author   openapi-generator contributors
 *
 * @see     https://github.com/openapitools/openapi-generator
 */

/**
 * Catroweb API.
 *
 * API for the Catrobat Share Platform
 *
 * The version of the OpenAPI document: v1.6.0
 * Contact: webmaster@catrobat.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Please update the test case below to test the model.
 */

namespace OpenAPI\Server\Tests\Model;

use OpenAPI\Server\Model\ProjectResponse;
use PHPUnit\Framework\MockObject\MockObject;
use PHPUnit\Framework\TestCase;

/**
 * ProjectResponseTest Class Doc Comment.
 *
 * @category    Class
 *
 * @description ProjectResponse
 *
 * @author      openapi-generator contributors
 *
 * @see        https://github.com/openapitools/openapi-generator
 *
 * @coversDefaultClass \OpenAPI\Server\Model\ProjectResponse
 *
 * @internal
 */
class ProjectResponseTest extends TestCase
{
  protected ProjectResponse|MockObject $object;

  /**
   * Setup before running any test case.
   */
  public static function setUpBeforeClass(): void
  {
  }

  /**
   * Setup before running each test case.
   */
  public function setUp(): void
  {
    $this->object = $this->getMockBuilder(ProjectResponse::class)->getMockForAbstractClass();
  }

  /**
   * Clean up after running each test case.
   */
  public function tearDown(): void
  {
  }

  /**
   * Clean up after running all test cases.
   */
  public static function tearDownAfterClass(): void
  {
  }

  /**
   * @group integration
   *
   * @small
   */
  public function testTestClassExists(): void
  {
    $this->assertTrue(class_exists(ProjectResponse::class));
    $this->assertInstanceOf(ProjectResponse::class, $this->object);
  }

  /**
   * Test attribute "id".
   *
   * @group unit
   *
   * @small
   */
  public function testPropertyId(): void
  {
    $this->markTestSkipped('Test for property id not implemented');
  }

  /**
   * Test attribute "name".
   *
   * @group unit
   *
   * @small
   */
  public function testPropertyName(): void
  {
    $this->markTestSkipped('Test for property name not implemented');
  }

  /**
   * Test attribute "author".
   *
   * @group unit
   *
   * @small
   */
  public function testPropertyAuthor(): void
  {
    $this->markTestSkipped('Test for property author not implemented');
  }

  /**
   * Test attribute "description".
   *
   * @group unit
   *
   * @small
   */
  public function testPropertyDescription(): void
  {
    $this->markTestSkipped('Test for property description not implemented');
  }

  /**
   * Test attribute "credits".
   *
   * @group unit
   *
   * @small
   */
  public function testPropertyCredits(): void
  {
    $this->markTestSkipped('Test for property credits not implemented');
  }

  /**
   * Test attribute "version".
   *
   * @group unit
   *
   * @small
   */
  public function testPropertyVersion(): void
  {
    $this->markTestSkipped('Test for property version not implemented');
  }

  /**
   * Test attribute "views".
   *
   * @group unit
   *
   * @small
   */
  public function testPropertyViews(): void
  {
    $this->markTestSkipped('Test for property views not implemented');
  }

  /**
   * Test attribute "download".
   *
   * @group unit
   *
   * @small
   */
  public function testPropertyDownload(): void
  {
    $this->markTestSkipped('Test for property download not implemented');
  }

  /**
   * Test attribute "downloads".
   *
   * @group unit
   *
   * @small
   */
  public function testPropertyDownloads(): void
  {
    $this->markTestSkipped('Test for property downloads not implemented');
  }

  /**
   * Test attribute "reactions".
   *
   * @group unit
   *
   * @small
   */
  public function testPropertyReactions(): void
  {
    $this->markTestSkipped('Test for property reactions not implemented');
  }

  /**
   * Test attribute "comments".
   *
   * @group unit
   *
   * @small
   */
  public function testPropertyComments(): void
  {
    $this->markTestSkipped('Test for property comments not implemented');
  }

  /**
   * Test attribute "private".
   *
   * @group unit
   *
   * @small
   */
  public function testPropertyPrivate(): void
  {
    $this->markTestSkipped('Test for property private not implemented');
  }

  /**
   * Test attribute "flavor".
   *
   * @group unit
   *
   * @small
   */
  public function testPropertyFlavor(): void
  {
    $this->markTestSkipped('Test for property flavor not implemented');
  }

  /**
   * Test attribute "tags".
   *
   * @group unit
   *
   * @small
   */
  public function testPropertyTags(): void
  {
    $this->markTestSkipped('Test for property tags not implemented');
  }

  /**
   * Test attribute "uploaded".
   *
   * @group unit
   *
   * @small
   */
  public function testPropertyUploaded(): void
  {
    $this->markTestSkipped('Test for property uploaded not implemented');
  }

  /**
   * Test attribute "uploaded_string".
   *
   * @group unit
   *
   * @small
   */
  public function testPropertyUploadedString(): void
  {
    $this->markTestSkipped('Test for property uploaded_string not implemented');
  }

  /**
   * Test attribute "screenshot_large".
   *
   * @group unit
   *
   * @small
   */
  public function testPropertyScreenshotLarge(): void
  {
    $this->markTestSkipped('Test for property screenshot_large not implemented');
  }

  /**
   * Test attribute "screenshot_small".
   *
   * @group unit
   *
   * @small
   */
  public function testPropertyScreenshotSmall(): void
  {
    $this->markTestSkipped('Test for property screenshot_small not implemented');
  }

  /**
   * Test attribute "project_url".
   *
   * @group unit
   *
   * @small
   */
  public function testPropertyProjectUrl(): void
  {
    $this->markTestSkipped('Test for property project_url not implemented');
  }

  /**
   * Test attribute "download_url".
   *
   * @group unit
   *
   * @small
   */
  public function testPropertyDownloadUrl(): void
  {
    $this->markTestSkipped('Test for property download_url not implemented');
  }

  /**
   * Test attribute "filesize".
   *
   * @group unit
   *
   * @small
   */
  public function testPropertyFilesize(): void
  {
    $this->markTestSkipped('Test for property filesize not implemented');
  }

  /**
   * Test attribute "not_for_kids".
   *
   * @group unit
   *
   * @small
   */
  public function testPropertyNotForKids(): void
  {
    $this->markTestSkipped('Test for property not_for_kids not implemented');
  }
}
