openapi: 3.0.2
info:
  title: Catroweb API
  description: API for the Catrobat Share Platform
  version: 1.0.3
  termsOfService: 'http://example.com/terms/'
  contact:
    name: 'Catrobat'
    url: 'https://share.catrob.at'
    email: 'webmaster@catrobat.org'
servers:
  - url: 'https://share.catrob.at/api'
    description: Main production server
  - url: 'https://web-test.catrob.at/api'
    description: WEB test server (might be unstabe)
  - url: 'android/test/server.at'
    description: ANDROID test server
tags:
  - name: 'Security'
    description: 'Everything related to security'
  - name: 'Projects'
    description: 'Everything related to projects'
  - name: 'Media Library'
    description: 'Everything related to the media library'
paths:
  /checkToken:
    post:
      tags:
        - Security
      summary: Checking token
      description: Endpoint giving information if a given token is valid or not
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  $ref: '#/components/schemas/Username'
      parameters:
        - name: token
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/Token'
      responses:
        '200':
          description: OK - Sent token is valid for the given username
        '401':
          description: NOT OK - Authentification required (missing token/username)
        '403':
          description: NOT OK - Invalid credentials
  /registerUser:
    post:
      tags:
        - Security
      summary: Registering a user
      description: Registering a user. For validation purposes look at the /registerValidation API
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Register'
      responses:
        '200':
          description: OK - User registerd
        '400':
          description: NOT OK - Malformed request body
        '422':
          description: NOT OK - Unable to process entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIValidationResponse'
  /registerValidation:
    post:
      tags:
        - Security
      summary: Validation of user input in the registration process
      description: Registering a user. 0 - 4 possible values can be given.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Register'
      responses:
        '200':
          description: OK - User validated
        '400':
          description: NOT OK - Malformed request body
        '422':
          description: NOT OK - Unable to process entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIValidationResponse'
  /login:
    post:
      tags:
        - Security
      summary: Login a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponseOK'
        '400':
          description: NOT OK - Bad request
        '401':
          description: NOT OK - Authorization required
  /logout:
    post:
      tags:
        - Security
      summary: Log out a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Logout'
      parameters:
        - name: token
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/Token'
      responses:
        '200':
          description: OK
        '400':
          description: NOT OK - Bad Request
        '401':
          description: NOT OK - Invalid credentials
  /media/package/{packageName}:
    get:
      tags:
        - Media Library
      summary: Get media-library asstes of a named package
      parameters:
        - in: path
          name: packageName
          schema:
            type: string
            example: looks
          required: true
          description: Name of the package
      responses:
        '200':
          description: Valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Packages'
        '404':
          description: Package name not found
  /projects/featured:
    get:
      tags:
        - Projects
      summary: Get the currently featured projects
      parameters:
        - name: platform
          in: query
          schema:
            type: string
            description: Indication what platform should be used (iOs, android)
            enum: [android, iOS]
            example:
              - android
        - name: max_version
          in: query
          schema:
            $ref: '#/components/schemas/MaxVersion'
        - name: limit
          in: query
          schema:
            $ref: '#/components/schemas/Limit'
        - name: offset
          in: query
          schema:
            $ref: '#/components/schemas/Offset'
        - name: flavor
          in: query
          schema:
            $ref: '#/components/schemas/Flavor'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeaturedProjects'
  /projects/recent:
    get:
      tags:
        - Projects
      summary: Get the most recent programs
      parameters:
        - name: max_version
          in: query
          schema:
            $ref: '#/components/schemas/MaxVersion'
        - name: limit
          in: query
          schema:
            $ref: '#/components/schemas/Limit'
        - name: offset
          in: query
          schema:
            $ref: '#/components/schemas/Offset'
        - name: flavor
          in: query
          schema:
            $ref: '#/components/schemas/Flavor'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Projects'
  /projects/mostDownloaded:
    get:
      tags:
        - Projects
      summary: Get the most downloaded projects
      parameters:
        - name: max_version
          in: query
          schema:
            $ref: '#/components/schemas/MaxVersion'
        - name: limit
          in: query
          schema:
            $ref: '#/components/schemas/Limit'
        - name: offset
          in: query
          schema:
            $ref: '#/components/schemas/Offset'
        - name: flavor
          in: query
          schema:
            $ref: '#/components/schemas/Flavor'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Projects'
  /projects/mostViewed:
    get:
      tags:
        - Projects
      summary: Get the most viewed projects
      parameters:
        - name: max_version
          in: query
          schema:
            $ref: '#/components/schemas/MaxVersion'
        - name: limit
          in: query
          schema:
            $ref: '#/components/schemas/Limit'
        - name: offset
          in: query
          schema:
            $ref: '#/components/schemas/Offset'
        - name: flavor
          in: query
          schema:
            $ref: '#/components/schemas/Flavor'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Projects'
  /projects/randomPrograms:
    get:
      tags:
        - Projects
      summary: Get random projects
      parameters:
        - name: max_version
          in: query
          schema:
            $ref: '#/components/schemas/MaxVersion'
        - name: limit
          in: query
          schema:
            $ref: '#/components/schemas/Limit'
        - name: offset
          in: query
          schema:
            $ref: '#/components/schemas/Offset'
        - name: flavor
          in: query
          schema:
            $ref: '#/components/schemas/Flavor'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Projects'
  /projects/search:
    get:
      tags:
        - Projects
      summary: Search for programs associated with a keywords
      parameters:
        - name: max_version
          in: query
          schema:
            $ref: '#/components/schemas/MaxVersion'
        - name: limit
          in: query
          schema:
            $ref: '#/components/schemas/Limit'
        - name: offset
          in: query
          schema:
            $ref: '#/components/schemas/Offset'
        - name: flavor
          in: query
          schema:
            $ref: '#/components/schemas/Flavor'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Projects'
  /projects/upload:
    post:
      tags:
        - Projects
      summary: Upload a catrobat program
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Upload'
      parameters:
        - name: token
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/Token'
      responses:
        '200':
          description: Upload OK
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadError'
  /projects/public/user/{user_id}:
    get:
      tags:
        - Projects
      summary: Get the public projects of a user, if user is logged in, then there will also be private programs
      parameters:
        - in: path
          name: user_id
          schema:
            type: string
            example: '1234abcd-12ab-12ab-12ab-123456abcdef'
          required: true
          description: UUID/ID of any given user
        - name: max_version
          in: query
          description: 'Only shows project with a smaller version number than max version'
          schema:
            type: string
            example: '0.999'
        - name: limit
          in: query
          description: 'How many projects should be shown at maximum'
          schema:
            type: integer
            default: 20
            example: 10
        - name: offset
          in: query
          description: 'How many projects should be shown at maximum'
          schema:
            type: integer
            example: 10
      responses:
        '200':
          description: Valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Projects'
        '404':
          description: User does not exist
  /projects/user/{user_id}:
    get:
      tags:
        - Projects
      summary: Get the projects of a user, if user is logged in, then there will also be private programs
      parameters:
        - in: path
          name: user_id
          schema:
            type: string
            example: '1234abcd-12ab-12ab-12ab-123456abcdef'
          required: true
          description: UUID/ID of any given user
        - name: max_version
          in: query
          description: 'Only shows project with a smaller version number than max version'
          schema:
            type: string
            example: '0.999'
        - name: limit
          in: query
          description: 'How many projects should be shown at maximum'
          schema:
            type: integer
            default: 20
            example: 10
        - name: offset
          in: query
          description: 'How many projects should be shown at maximum'
          schema:
            type: integer
            example: 10
        - name: token
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/Token'
      responses:
        '200':
          description: Valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Projects'
        '401':
          description: NOT OK - Authentification required
        '403':
          description: NOT OK - Invalid credentials
  /project/{project_id}:
    get:
      tags:
        - Projects
      summary: Get the information of a project
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
            example: '1234abcd-12ab-12ab-12ab-123456abcdef'
          required: true
          description: UUID/ID of any given project
      responses:
        '200':
          description: Valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '404':
          description: Project does not exist
components:
  schemas:
    MaxVersion:
      type: string
      description: 'Only shows project with a smaller version number than max version'
      example: '0.999'
      pattern: '[0-9]\.[0-9]{3}'
    Limit:
      type: integer
      minimum: 0
      description: 'How many projects should be shown at maximum'
      default: 20
      example: 3
    Offset:
      type: integer
      minimum: 0
      description: 'How many projects should be skipped'
      default: 0
      example: 2
    Flavor:
      type: string
      description: Available flavors
      enum: [pocketcode, pocketalice, pocketgalaxy, pocketphiro, phirocode, luna, create@school, embroidery, arduino]
      example: pocketcode
      default: pocketcode
    Token:
      type: string
      example: tkf4e26780c9e6b1d171f3dbeafa194cac
    Upload:
      type: object
      properties:
        checksum:
          type: string
          example: 'asd'
          description: 'Checksum of the *.catrobat file'
        file:
          type: string
          format: binary
          description: '*.catrobat file'
        flavor:
          $ref: '#/components/schemas/Flavor'
        tags:
          $ref: '#/components/schemas/Tags'
    UploadError:
      type: object
      properties:
        status:
          type: integer
          example: 418
        error:
          type: string
          enum: [Token invalid, Checksum invalid, ZIP invalid, XML invalid, Flavor invalid]
          example:
            - Checksum invalid
            - XML invalid
    APIValidationResponse:
      type: object
      properties:
        status:
          type: integer
          example: 418
          description: Statuscode if validation was successfull or yielded errors (200 or 400)
        email:
          type: string
          example:
            - EMail not valid
            - EMail already in use!
        username:
          type: string
          example:
            - Username too short!
            - Username already in use!
        password:
          type: string
          example:
            - Password too short
            - Password contains invalid chars
    Register:
      type: object
      properties:
        email:
          type: string
          format: email
          example: 'test@test.lan'
          description: EMail of the user. Validation via /registerValidation
        username:
          $ref: '#/components/schemas/Username'
        password:
          $ref: '#/components/schemas/Password'
        locale:
          type: string
          example: 'de'
          description: The locale, in which the answer message shoudl be translated. If not given default will be 'en'.
    Login:
      type: object
      properties:
        username:
          $ref: '#/components/schemas/Username'
        password:
          $ref: '#/components/schemas/Password'
    LoginResponseOK:
      type: object
      properties:
        token:
          $ref: '#/components/schemas/Token'
    Logout:
      type: object
      properties:
        username:
          $ref: '#/components/schemas/Username'
    Packages:
      type: array
      items:
        $ref: '#/components/schemas/Package'
    Package:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: 'luna_sinde_2'
        flavor:
          $ref: '#/components/schemas/Flavor'
        package:
          type: string
          example: 'Looks'
        category:
          type: string
          example: 'Luna&Cat'
        author:
          type: string
          example: 'CatrowebAdmin'
        extension:
          type: string
          example: 'png'
        download_url:
          type: string
          example: 'https://share.catrob.at/pocketcode/download-media/983.png'
    FeaturedProjects:
      type: array
      items:
        $ref: '#/components/schemas/FeaturedProject'
    FeaturedProject:
      type: object
      properties:
        id:
          type: string
          example: '1234abcd-12ab-12ab-12ab-123456abcdef'
        name:
          type: string
          example: 'My example of a Program'
        author:
          type: string
          example: 'Admin'
        featured_image:
          type: string
          example: 'https://share.catrob.at/resources/featured/featured_999.png'
    Projects:
      type: array
      items:
        $ref: '#/components/schemas/Project'
    Project:
      type: object
      properties:
        id:
          type: string
          example: '1234abcd-12ab-12ab-12ab-123456abcdef'
        name:
          type: string
          example: 'My example of a Program'
        author:
          type: string
          example: 'Admin'
        description:
          type: string
          example: 'My very cool program!'
        version:
          type: string
          example: '0.9.66'
        views:
          type: integer
          example: 2
        download:
          type: integer
          example: 2
        private:
          type: boolean
          example: false
        flavor:
          $ref: '#/components/schemas/Flavor'
        uploaded:
          type: integer
          example: 1575562569
        uploaded_string:
          type: string
          example: '11 minutes ago'
        screenshot_large:
          type: string
          example: 'https://share.catrob.at/resources/screenshots/screen_1234abcd-12ab-12ab-12ab-123456abcdef.png'
        screenshot_small:
          type: string
          example: 'https://share.catrob.at/resources/thumbnails/screen_1234abcd-12ab-12ab-12ab-123456abcdef.png'
        projectUrl:
          type: string
          example: 'https://share.catrob.at/pocketcode/project/1234abcd-12ab-12ab-12ab-123456abcdef'
        downloadUrl:
          type: string
          example: 'https://share.catrob.at/pocketcode/download/1234abcd-12ab-12ab-12ab-123456abcdef.catrobat'
        filesize:
          type: number
          example: 0.14381762458251943
          description: 'filesize in megabytes'
    Tags:
      type: array
      minItems: 0
      maxItems: 3
      items:
        $ref: '#/components/schemas/Tag'
    Tag:
      type: string
      enum: 
        - Game
        - Animation
        - Story
        - Music
        - Art
        - Experimental
        - Tutorial
      example: Game
    Username:
      type: string
      minLength: 3
      maxLength: 180
      example: 'Testuser'
      description: Name of the user
    Password:
      type: string
      format: password
      minLength: 6
      maxLength: 4096
      example: 'password'
      description: A secure password.